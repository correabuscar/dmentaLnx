#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

echo "in precommit hook"
current_git_username="`git config --get user.name`"
#expecteduser="$MY_GIT_USERNAME"
#expectedemail="$MY_GIT_EMAILADDRESS"
if test "$MY_GIT_USERNAME" != "$current_git_username"; then
  echo "Current git user.name is incorrect: '$current_git_username'"
  echo "Should be the value of \$MY_GIT_USERNAME which is '$MY_GIT_USERNAME'"
  exit 1
fi
current_git_useremail="`git config --get user.email`"
if test "$MY_GIT_EMAILADDRESS" != "$current_git_useremail"; then
  echo "Current git user.email is incorrect: '$current_git_useremail'"
  echo "Should be the value of \$MY_GIT_EMAILADDRESS which is '$MY_GIT_EMAILADDRESS'"
  exit 1
fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
  whichchars="$(git diff --cached --name-only --diff-filter=A -z $against |
      LC_ALL=C tr -d '[ -~]\0')"
#  echo "$(echo -n "$whichchars" | wc -c )"
#	test "$(wc -c <<< "$whichchars" )" != 1
  test "$(echo -n "$whichchars" | wc -c )" != 0
then
	cat <<EOF
Error: Attempt to add a non-ASCII file name(s).

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true

These are the characters which should be removed:
$whichchars
These are the affected files:
EOF
LC_ALL=C find . -regex '.*[^ -z}{|~].*' -exec echo "{}" \;
#good reason for using echo, otherwise the chars are all questionmark!
#"`echo "{}" | LC_ALL=C tr -c -- "[ -~]\n" "_"`"'  \;
cat <<\EOF
ie. run this command to rename all affected files in current dir (recursively!):
LC_ALL=C find . -regex '.*[^ -z}{|~].*' -execdir bash -c 'mv --verbose -- "{}" "`echo "{}" | LC_ALL=C tr -c -- "[ -~]\n" "_"`"'  \;

OR

run this command to only see the old and new names that the above rename would've done(and also the location of each file):
LC_ALL=C find . -regex '.*[^ -z}{|~].*' -exec bash -c 'echo -- "{}" "`echo "{}" | LC_ALL=C tr -c -- "[ -~]\n" "_"`"'  \;
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
#also shows 'leftover conflict marker' ! and you may want to comment this out sometimes!
exec git diff-index --check --cached $against -- 
 
 
